package com.zhr.test.bean;

public class WanAndroidBean {

    /**
     * data : {"curPage":51,"datas":[{"apkLink":"","author":"jiangwei0910410003","chapterId":93,"chapterName":"基础知识","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":989,"link":"http://blog.csdn.net/jiangwei0910410003/article/details/17006087","niceDate":"2016-09-04","origin":"CSDN","projectLink":"","publishTime":1472977885000,"superChapterId":134,"superChapterName":"自定义控件","tags":[],"title":"Android中attrs.xml文件的使用详解","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"lmj623565791","chapterId":93,"chapterName":"基础知识","collect":false,"courseId":13,"desc":"styleable 的含义是什么？可以不写嘛？我自定义属性，我声明属性就好了，为什么一定要写个styleable呢？\r\n如果系统中已经有了语义比较明确的属性，我可以直接使用嘛？\r\n构造方法中的有个参数叫做AttributeSet \r\n（eg: MyTextView(Context context, AttributeSet attrs) ）这个参数看名字就知道包含的是参数的数组，那么我能不能通过它去获取我的自定义属性呢？\r\nTypedArray是什么鬼？从哪冒出来的，就要我去使用？","envelopePic":"","fresh":false,"id":988,"link":"http://blog.csdn.net/lmj623565791/article/details/45022631/","niceDate":"2016-09-04","origin":"CSDN","projectLink":"","publishTime":1472977849000,"superChapterId":134,"superChapterName":"自定义控件","tags":[],"title":"Android 深入理解Android中的自定义属性","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"x359981514","chapterId":151,"chapterName":"Vector","collect":false,"courseId":13,"desc":"两年前写书的时候，就在研究Android L提出的Vector，可研究下来发现，完全不具备兼容性，相信这也是它没有被广泛使用的一个原因，经过Google的不懈努力，现在Vector终于迎来了它的春天。","envelopePic":"","fresh":false,"id":987,"link":"http://blog.csdn.net/eclipsexys/article/details/51838119","niceDate":"2016-09-04","origin":"CSDN","projectLink":"","publishTime":1472975105000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"Android Vector曲折的兼容之路","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"lanrenxinxin","chapterId":160,"chapterName":"热修复","collect":false,"courseId":13,"desc":"我们可以利用DexClassLoader来实现动态加载dex文件，而很多资料也只是对于DexClassLoader的使用进行了介绍，没有深入讲解dex的动态加载机制，我们就借助于Android4.4的源码来探索。","envelopePic":"","fresh":false,"id":986,"link":"http://www.cnblogs.com/lanrenxinxin/p/4712224.html","niceDate":"2016-09-04","origin":"cnblogs","projectLink":"","publishTime":1472973926000,"superChapterId":61,"superChapterName":"热门专题","tags":[],"title":"浅析dex文件加载机制","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"Wing_Li","chapterId":169,"chapterName":"gradle","collect":false,"courseId":13,"desc":"最近有个需求一次要打包9个类型的App，而且常量和String.xml都有变量。虽然之前也是一直存在变量，但是每次也仅仅只打包一个。这让我每次改变量，打包9个。要是以后每次都打包9次，我得疯了。\r\n根据之前的了解，gradle 应该是可以解决这个问题的。","envelopePic":"","fresh":false,"id":984,"link":"http://www.jianshu.com/p/533240d222d3#","niceDate":"2016-09-03","origin":"简书","projectLink":"","publishTime":1472914553000,"superChapterId":60,"superChapterName":"开发环境","tags":[],"title":"Gradle多渠道打包(动态设定App名称，应用图标，替换常量，更改包名，变更渠道)","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"Keegan小钢","chapterId":168,"chapterName":"Drawable","collect":false,"courseId":13,"desc":"一个应用，应该保持一套统一的样式，包括Button、EditText、ProgressBar、Toast、Checkbox等各种控件的样式，还包括控件间隔、文字大小和颜色、阴影等等。web的样式用css来定义，而android的样式主要则是通过shape、selector、layer-list、level-list、style、theme等组合实现。我将用一系列文章，循序渐进地讲解样式的每个方面该如何实现。第一个要讲的就是shape，最基础的形状定义工具。","envelopePic":"","fresh":false,"id":983,"link":"http://keeganlee.me/post/android/20150830","niceDate":"2016-09-03","origin":"http://keeganlee.me/","projectLink":"","publishTime":1472901417000,"superChapterId":168,"superChapterName":"基础知识","tags":[],"title":"Android样式的开发:shape篇","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"u013132758","chapterId":60,"chapterName":"Android Studio相关","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":982,"link":"http://blog.csdn.net/u013132758/article/details/52355915","niceDate":"2016-09-03","origin":"CSDN","projectLink":"","publishTime":1472898835000,"superChapterId":60,"superChapterName":"开发环境","tags":[],"title":"gradle 详解\u2014\u2014你真的了解Gradle吗？","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"半栈工程师","chapterId":60,"chapterName":"Android Studio相关","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":981,"link":"http://www.jianshu.com/p/5b7a1542ae47","niceDate":"2016-09-02","origin":"简书","projectLink":"","publishTime":1472831582000,"superChapterId":60,"superChapterName":"开发环境","tags":[],"title":"浅谈Instan Run中的热替换","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"qibin0506","chapterId":166,"chapterName":"BottomSheet","collect":false,"courseId":13,"desc":"最近android更新了support library, 版本到了23.2, 从官方blog中我们还是可以看到几个令人心动的特性的,例如夜间模式的支持,BottomSheet.今天我们就来介绍一下这个Bottom Sheet,这可能会给我们开发中需要的一些效果带来便利.","envelopePic":"","fresh":false,"id":980,"link":"http://blog.csdn.net/qibin0506/article/details/51002241","niceDate":"2016-09-02","origin":"CSDN","projectLink":"","publishTime":1472831141000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"Android Bottom Sheet详解","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"圣骑士Wind","chapterId":80,"chapterName":"Github用法进阶","collect":false,"courseId":13,"desc":"实用的git命令总结~","envelopePic":"","fresh":false,"id":979,"link":"http://www.cnblogs.com/mengdd/p/4153773.html","niceDate":"2016-09-02","origin":"cnblogs","projectLink":"","publishTime":1472810541000,"superChapterId":61,"superChapterName":"热门专题","tags":[],"title":"Git常用命令总结","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"canaan","chapterId":160,"chapterName":"热修复","collect":false,"courseId":13,"desc":"现在 hotfix 框架有很多，原理大同小异，基本上是基于qq空间这篇文章 或者微信的方案。可惜的是微信的 Tinker 以及 QZone 都没有将其具体实现开源出来，只是在文章中分析了现有各个 hotfix 框架的优缺点以及他们的实现方案。Amigo 原理与 Tinker 基本相同，但是在 Tinker 的基础上，进一步实现了 so 文件、资源文件、Activity、BroadcastReceiver 的修复，几乎可以号称全面修复，不愧 Amigo（朋友）这个称号，能在危急时刻送来全面的帮助。","envelopePic":"","fresh":false,"id":978,"link":"http://www.diycode.cc/topics/280","niceDate":"2016-09-02","origin":"diycode.cc","projectLink":"","publishTime":1472795288000,"superChapterId":61,"superChapterName":"热门专题","tags":[],"title":"Android Hotfix 新方案\u2014\u2014Amigo 源码解读","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"Developer_Kale","chapterId":165,"chapterName":"Support Annotations","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":977,"link":"http://www.cnblogs.com/tianzhijiexian/p/4493158.html","niceDate":"2016-08-23","origin":"cnblogs","projectLink":"","publishTime":1471938912000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"深入浅出Android Support Annotation","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"asce1885","chapterId":165,"chapterName":"Support Annotations","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":976,"link":"http://www.jianshu.com/p/30e1a8c09aa9","niceDate":"2016-08-23","origin":"简书","projectLink":"","publishTime":1471937393000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"［译］深入浅出Android Support Annotations","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"asce1885","chapterId":165,"chapterName":"Support Annotations","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":975,"link":"http://www.jianshu.com/p/1d0faca34a6e","niceDate":"2016-08-23","origin":"简书","projectLink":"","publishTime":1471937381000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"［译］使用Android Support Annotations优化你的代码","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"qibin0506","chapterId":193,"chapterName":"分屏","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":974,"link":"http://blog.csdn.net/qibin0506/article/details/52270674","niceDate":"2016-08-22","origin":"CSDN","projectLink":"","publishTime":1471877131000,"superChapterId":55,"superChapterName":"5.+高新技术","tags":[],"title":"是时候来了解android7了:多窗口支持","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"justFWD","chapterId":149,"chapterName":"so文件相关","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":973,"link":"http://blog.csdn.net/justfwd/article/details/49308199","niceDate":"2016-08-22","origin":"CSDN","projectLink":"","publishTime":1471870466000,"superChapterId":149,"superChapterName":"JNI","tags":[],"title":"让APK只包含指定的ABI","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"liuhe688","chapterId":90,"chapterName":"数据库","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":972,"link":"http://blog.csdn.net/lespace/article/details/52020290","niceDate":"2016-08-22","origin":"CSDN","projectLink":"","publishTime":1471836444000,"superChapterId":90,"superChapterName":"数据存储","tags":[],"title":"Android中SQLite应用详解","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"cyrilmottier","chapterId":163,"chapterName":"Splash页优化","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":970,"link":"http://cyrilmottier.com/2013/01/23/android-app-launching-made-gorgeous/","niceDate":"2016-08-22","origin":"http://cyrilmottier.com/","projectLink":"","publishTime":1471795243000,"superChapterId":135,"superChapterName":"项目必备","tags":[],"title":"Android App Launching Made Gorgeous","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"shiguiyou","chapterId":163,"chapterName":"Splash页优化","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":969,"link":"http://blog.csdn.net/shiguiyou/article/details/50255929","niceDate":"2016-08-21","origin":"CSDN","projectLink":"","publishTime":1471793993000,"superChapterId":135,"superChapterName":"项目必备","tags":[],"title":"Android启动页面的正确打开方式","type":0,"userId":-1,"visible":1,"zan":0},{"apkLink":"","author":"于连林520wcf","chapterId":78,"chapterName":"性能优化","collect":false,"courseId":13,"desc":"","envelopePic":"","fresh":false,"id":967,"link":"http://www.jianshu.com/p/216b03c22bb8","niceDate":"2016-08-21","origin":"简书","projectLink":"","publishTime":1471770848000,"superChapterId":61,"superChapterName":"热门专题","tags":[],"title":"使用新版Android Studio检测内存泄露和性能","type":0,"userId":-1,"visible":1,"zan":0}],"offset":1000,"over":false,"pageCount":66,"size":20,"total":1308}
     * errorCode : 0
     * errorMsg :
     */

    private DataBean data;
    private int errorCode;
    private String errorMsg;

    public DataBean getData() {
        return data;
    }

    public void setData(DataBean data) {
        this.data = data;
    }

    public int getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(int errorCode) {
        this.errorCode = errorCode;
    }

    public String getErrorMsg() {
        return errorMsg;
    }

    public void setErrorMsg(String errorMsg) {
        this.errorMsg = errorMsg;
    }

    @Override
    public String toString() {
        return "WanAndroidBean{" +
                "data=" + data +
                ", errorCode=" + errorCode +
                ", errorMsg='" + errorMsg + '\'' +
                '}';
    }
}
